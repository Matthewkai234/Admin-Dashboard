<!DOCTYPE html>
<html lang="en">
    
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movies Chart - <%= title %></title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/style.min.css" rel="stylesheet" />
    <link href="/static/css/styles.css" rel="stylesheet" />
    <script src="https://use.fontawesome.com/releases/v6.3.0/js/all.js" crossorigin="anonymous"></script>
</head>

<body>
    <div class="col">
        <div class="card mb-4">
            <div class="card-header">
                <a href="/index">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
                    </svg>
                    Return to Dashboard
                </a>
            </div>
            
            <div class="card-body">
                <canvas id="myChart" width="400" height="200"></canvas>
            </div>
        </div>
    </div>
    
    <script>
        async function fetchMovies() {
            const response = await fetch('/api/movie/get-movies');
            const data = await response.json();
            return data;
        }

        function transformDataForChart(data) {
            const movies = data.data.map(item => ({
                movieId: item[0],
                title: item[1],
                genres: item[2]
            }));

            // Example transformation: Count the number of movies per year (assuming titles include year info)
            const movieCountByYear = movies.reduce((acc, movie) => {
                const year = parseInt(movie.title.match(/\((\d{4})\)/)?.[1], 10);
                if (year) {
                    if (!acc[year]) {
                        acc[year] = 0;
                    }
                    acc[year]++;
                }
                return acc;
            }, {});

            const labels = Object.keys(movieCountByYear).sort();
            const values = labels.map(year => movieCountByYear[year]);

            return {
                labels,
                datasets: [{
                    label: 'Movies per Year',
                    data: values,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            };
        }

        async function createChart() {
            const data = await fetchMovies();
            const chartData = transformDataForChart(data);

            const ctx = document.getElementById('myChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar', // or 'line', 'pie', etc.
                data: chartData,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        createChart();
    </script>
</body>
</html>